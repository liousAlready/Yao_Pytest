{
  "uid" : "f89f586ff68e2bfd",
  "name" : "test_login_failed_invalid_data[case1]",
  "fullName" : "TestCases.test_login.TestLogin#test_login_failed_invalid_data",
  "historyId" : "1352fcf7b98c3a086b04449cfbf3bcb3",
  "time" : {
    "start" : 1636516706444,
    "stop" : 1636516727704,
    "duration" : 21260
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <TestCases.test_login.TestLogin object at 0x04776290>\ncase = {'check': '请输入密码', 'passwd': '', 'user': '13252254992'}\nrefresh = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae69c468b0946087963865dbd5b1214e\")>\n\n    @allure.story(\"[Story]用户根据用户名密码登录系统\")\n    # @allure.title(\"[TiTile]case 登录失败逆向场景\")\n    # @allure.description(\"登录测试用例 执行人：李某\")\n    @pytest.mark.parametrize(\"case\", td.invalid_data)\n    def test_login_failed_invalid_data(self, case, refresh):\n        LoginPage(refresh).login(case['user'], case['passwd'])\n>       assert LoginPage(refresh).get_error_msg_from_login_area() == case['check']\n\nTestCases\\test_login.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\login_page.py:28: in get_error_msg_from_login_area\n    return self.get_text(loc.error_tip_from_login_area, \"登录页面-获取登录区域错误提示信息\")\nCommon\\base_page.py:217: in get_text\n    ele = self.get_element(locator, page_action, timeout, poll_frequency)\nCommon\\base_page.py:134: in get_element\n    self.wait_page_contains_element(locator, page_action, timeout, poll_frequency)\nCommon\\base_page.py:110: in wait_page_contains_element\n    WebDriverWait(self.driver, timeout, poll_frequency).until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ae69c468b0946087963865dbd5b1214e\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x047EB410>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1636516695811,
      "stop" : 1636516704617,
      "duration" : 8806
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "refresh",
    "time" : {
      "start" : 1636516705985,
      "stop" : 1636516706442,
      "duration" : 457
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <TestCases.test_login.TestLogin object at 0x04776290>\ncase = {'check': '请输入密码', 'passwd': '', 'user': '13252254992'}\nrefresh = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae69c468b0946087963865dbd5b1214e\")>\n\n    @allure.story(\"[Story]用户根据用户名密码登录系统\")\n    # @allure.title(\"[TiTile]case 登录失败逆向场景\")\n    # @allure.description(\"登录测试用例 执行人：李某\")\n    @pytest.mark.parametrize(\"case\", td.invalid_data)\n    def test_login_failed_invalid_data(self, case, refresh):\n        LoginPage(refresh).login(case['user'], case['passwd'])\n>       assert LoginPage(refresh).get_error_msg_from_login_area() == case['check']\n\nTestCases\\test_login.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\login_page.py:28: in get_error_msg_from_login_area\n    return self.get_text(loc.error_tip_from_login_area, \"登录页面-获取登录区域错误提示信息\")\nCommon\\base_page.py:217: in get_text\n    ele = self.get_element(locator, page_action, timeout, poll_frequency)\nCommon\\base_page.py:134: in get_element\n    self.wait_page_contains_element(locator, page_action, timeout, poll_frequency)\nCommon\\base_page.py:110: in wait_page_contains_element\n    WebDriverWait(self.driver, timeout, poll_frequency).until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ae69c468b0946087963865dbd5b1214e\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x047EB410>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "793c341db03a2686",
      "name" : "log",
      "source" : "793c341db03a2686.txt",
      "type" : "text/plain",
      "size" : 565
    }, {
      "uid" : "f1db5975a95d3db8",
      "name" : "stderr",
      "source" : "f1db5975a95d3db8.txt",
      "type" : "text/plain",
      "size" : 592
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "refresh::0",
    "time" : {
      "start" : 1636516727792,
      "stop" : 1636516727792,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "init::0",
    "time" : {
      "start" : 1636516730464,
      "stop" : 1636516732716,
      "duration" : 2252
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "[epic]盛杰运营后台"
  }, {
    "name" : "story",
    "value" : "[Story]用户根据用户名密码登录系统"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('refresh')"
  }, {
    "name" : "parentSuite",
    "value" : "TestCases"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-OTOI92D"
  }, {
    "name" : "thread",
    "value" : "17268-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'user': '13252254992', 'passwd': '', 'check': '请输入密码'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('refresh')" ]
  },
  "source" : "f89f586ff68e2bfd.json",
  "parameterValues" : [ "{'user': '13252254992', 'passwd': '', 'check': '请输入密码'}" ]
}